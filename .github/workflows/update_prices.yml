# .github/workflows/update_prices.yml
name: Update Prices Cache

on:
  schedule:
    - cron: "10 22 * * 1-5"   # ~22:10 UTC on trading days (after US close)
  workflow_dispatch: {}
  push:
    paths:
      - "mm_top_20.csv"
      - "ticker_map.csv"
      - ".github/workflows/update_prices.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          # Use the newer yfinance that worked locally for you
          pip install "yfinance==0.2.66" pandas numpy pyarrow

      - name: Generate prices cache
        run: |
          python - <<'PY'
          import pandas as pd, numpy as np
          import yfinance as yf

          # ---- Load inputs ----
          buys = pd.read_csv("mm_top_20.csv").rename(columns={"Ticker":"user_ticker","Date":"buy_date"})
          buys["buy_date"] = pd.to_datetime(buys["buy_date"], errors="coerce")

          tmap = pd.read_csv("ticker_map.csv").rename(columns={"User Ticker":"user_ticker","Resolved Ticker":"resolved"})

          def exchsym_to_yahoo(resolved: str) -> str | None:
              if not isinstance(resolved, str) or ":" not in resolved: return None
              exch, sym = resolved.split(":", 1)
              exch = exch.strip().upper(); sym = sym.strip().upper()
              suffix = {"NASDAQ":"","NYSE":"","AMEX":"","NYSEARCA":"","LON":".L","LSE":".L","AMS":".AS"}.get(exch,"")
              return sym + suffix

          tmap["yf_ticker"] = tmap["resolved"].apply(exchsym_to_yahoo)

          mapped = buys.merge(tmap[["user_ticker","yf_ticker"]], on="user_ticker", how="left")
          mapped["yf_ticker"] = np.where(
              mapped["yf_ticker"].isna() | (mapped["yf_ticker"].astype(str).str.len()==0),
              mapped["user_ticker"].astype(str).str.upper(),
              mapped["yf_ticker"]
          )

          competitors = ["SPY", "QQQ"]
          symbols = sorted(set(mapped["yf_ticker"].dropna().astype(str)) | set(competitors))

          # Date window: earliest buy - 5d  → tomorrow (Yahoo end is exclusive)
          start = (mapped["buy_date"].min() - pd.Timedelta(days=5)).date().isoformat()
          end   = (pd.Timestamp.utcnow().normalize() + pd.Timedelta(days=1)).date().isoformat()

          print("Fetching", len(symbols), "symbols")
          print("Window:", start, "→", end)

          ok = {}

          # ---- 1) Chunked multi-ticker downloads (no custom session) ----
          CHUNK = 8
          for i in range(0, len(symbols), CHUNK):
              chunk = symbols[i:i+CHUNK]
              try:
                  df = yf.download(
                      tickers=chunk,
                      start=start, end=end,
                      interval="1d",
                      auto_adjust=True,
                      group_by="ticker",
                      progress=False,
                      threads=False,    # more reliable in CI
                  )
              except Exception as e:
                  print("Batch failed for", chunk, "reason:", e)
                  df = None

              if df is None or df.empty:
                  continue

              if isinstance(df.columns, pd.MultiIndex):
                  roots = set(df.columns.get_level_values(0))
                  for sym in chunk:
                      if sym in roots and "Close" in df[sym].columns:
                          s = df[sym]["Close"].dropna()
                          if not s.empty:
                              ok[sym] = s
              else:
                  # single-ticker frame
                  if len(chunk) == 1 and "Close" in df.columns:
                      s = df["Close"].dropna()
                      if not s.empty:
                          ok[chunk[0]] = s

          # ---- 2) Per-symbol fallback with small retries ----
          missing = [s for s in symbols if s not in ok]
          for sym in missing:
              success = False
              for _ in range(3):
                  try:
                      h = yf.Ticker(sym).history(start=start, end=end, interval="1d", auto_adjust=True)
                      if h is not None and not h.empty and "Close" in h.columns:
                          s = h["Close"].dropna()
                          if not s.empty:
                              ok[sym] = s
                              success = True
                              break
                  except Exception:
                      continue
              if not success:
                  print("Fallback failed for", sym)

          if not ok:
              print("WARN: No data fetched — leaving existing prices_cache.parquet as-is (if any).")
              raise SystemExit(0)  # don't fail the job; nothing to commit

          out = pd.DataFrame(ok)
          out.index = pd.to_datetime(out.index)
          out = out.sort_index()
          out.to_parquet("prices_cache.parquet")
          print("Wrote prices_cache.parquet with columns:", list(out.columns))
          PY

      - name: Commit & push parquet
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add prices_cache.parquet
          git commit -m "Update prices cache" || echo "No changes"
          git push
